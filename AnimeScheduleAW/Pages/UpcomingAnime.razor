@page "/UpcomingAnime"
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization

<h3>Upcoming Anime</h3>

@if (loading)
{
    <p>Loading...</p>
}
else if (error)
{
    <p>An error occurred: @errorMessage</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Title</th>
                <th>Start Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var anime in airingAnime)
            {
                <tr>
                    <td>@anime.Title</td>
                    <td>@anime.StartDate</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool loading;
    private bool error;
    private string errorMessage;
    private List<Anime> airingAnime;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        try
        {
            // Replace 'YOUR_API_KEY' with the API key you obtained
            string apiKey = "djJomT0AFKQ69MR1MTsz7bOJbThnaBvMc1o3dz73";

            // Set up the HTTP client
            HttpClient httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", apiKey);
            httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            // Set the current date and date 2 weeks from now
            string currentDate = DateTime.Today.ToString("yyyyMMdd");
            string twoWeeksLater = DateTime.Today.AddDays(14).ToString("yyyyMMdd");

            // GraphQL query to retrieve anime airing in the next 2 weeks
            string query = @"
                query ($date: FuzzyDateInt) {
                  Page {
                    media(status: RELEASING, airingAt_greater: $date, airingAt_lesser: $date) {
                      id
                      title {
                        romaji
                      }
                      startDate {
                        year
                        month
                        day
                      }
                    }
                  }
                }";

            // Variables to be passed with the query
            var variables = new
            {
                date = currentDate
            };

            // Serialize variables to JSON
            string variablesJson = JsonSerializer.Serialize(variables);

            // Make the API request
            HttpResponseMessage response = await httpClient.PostAsync("https://graphql.anilist.co", new StringContent(
                @"{ ""query"": """ + query.Replace("\"", "\\\"") + @""", ""variables"": " + variablesJson + " }",
                Encoding.UTF8,
                "application/json"));

            if (response.IsSuccessStatusCode)
            {
                string responseJson = await response.Content.ReadAsStringAsync();

                var data = JsonDocument.Parse(responseJson).RootElement;

                if (data.TryGetProperty("errors", out var errors))
                {
                    error = true;
                    errorMessage = errors[0].GetProperty("message").GetString();
                }
                else
                {
                    airingAnime = data.GetProperty("data").GetProperty("Page").GetProperty("media")
                        .EnumerateArray()
                        .Select(a => new Anime
                            {
                                Title = a.GetProperty("title").GetProperty("romaji").GetString(),
                                StartDate = $"{a.GetProperty("startDate").GetProperty("year").GetInt32()}-{a.GetProperty("startDate").GetProperty("month").GetInt32()}-{a.GetProperty("startDate").GetProperty("day").GetInt32()}"
                            })
                        .ToList();
                }
            }
            else
            {
                error = true;
                errorMessage = $"An error occurred: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"An error occurred: {ex.Message}";
        }

        loading = false;
    }

    public class Anime
    {
        public string Title { get; set; }
        public string StartDate { get; set; }
    }
}